% build random MI distributions for each size of Broad Inst. group we find (770 sizes)
% sizes already queried from database and added to 'group_sizes' array

how_many = 770;

addpath(genpath('/Applications/MATLAB_R2015a.app/toolbox/MIToolbox'));

group_sizes = [ ...
	385, 331, 97, 18, 304, 518, 792, 177, 305, 525, 77, 608, 1134, 59, 147, 312, 446, 356, 569, 228, 269, 106, 430, 292, 1151, 1916, 577, 66, 278, 877, 196, 417, 1493, 1391, 271, 379, 892, 616, 1171, 280, 562, 65, 1438, 360, 86, 528, 348, 738, 32, 363, 274, 316, 114, 427, 567, 711, 20, 351, 149, 392, 776, 538, 1, 184, 347, 715, 245, 387, 879, 110, 42, 977, 514, 321, 319, 721, 291, ...
	338, 1440, 401, 2208, 159, 495, 732, 358, 160, 1674, 261, 63, 685, 1480, 281, 298, 425, 250, 434, 589, 1466, 174, 236, 591, 99, 263, 229, 322, 1435, 185, 1122, 29, 1341, 156, 277, 393, 323, 352, 311, 712, 1180, 8, 727, 428, 1182, 225, 133, 1290, 254, 345, 48, 223, 373, 426, 140, 380, 1308, 4, 3036, 213, 1904, 31, 800, 154, 447, 93, 128, 17, 200, 671, 542, 578, 1727, 83, 729, 180, 104, ...
	487, 211, 1878, 72, 485, 566, 398, 85, 1248, 1755, 248, 701, 1293, 74, 439, 23, 349, 214, 455, 1012, 78, 365, 330, 374, 1240, 1851, 94, 1661, 327, 176, 266, 436, 155, 299, 598, 51, 125, 293, 829, 531, 343, 703, 467, 220, 773, 925, 530, 168, 235, 282, 84, 144, 126, 852, 1108, 630, 545, 660, 606, 469, 255, 27, 276, 400, 362, 484, 1720, 1172, 151, 268, 515, 820, 264, 838, 89, 153, 308, ...
	840, 386, 247, 431, 141, 1143, 886, 1049, 103, 287, 37, 170, 413, 130, 227, 546, 219, 698, 310, 52, 119, 406, 1148, 44, 62, 513, 519, 1583, 328, 2856, 350, 539, 793, 1097, 486, 516, 944, 105, 98, 337, 1096, 411, 2655, 207, 1166, 167, 448, 1173, 67, 134, 137, 340, 2226, 2342, 294, 239, 474, 508, 382, 466, 2903, 69, 71, 325, 171, 479, 238, 290, 314, 355, 777, 1296, 462, 58, 226, 798, 43, ...
	9, 14, 60, 595, 187, 205, 505, 1174, 441, 590, 249, 302, 112, 621, 240, 408, 573, 2090, 1561, 36, 115, 632, 375, 424, 179, 696, 68, 6, 222, 5, 678, 618, 811, 687, 182, 555, 422, 3, 656, 300, 371, 480, 489, 506, 359, 442, 1666, 720, 367, 192, 1373, 95, 454, 684, 191, 383, 860, 260, 563, 234, 748, 158, 329, 1026, 2511, 407, 623, 286, 405, 1390, 198, 251, 461, 22, 108, 188, 218, ...
	532, 477, 296, 1144, 728, 230, 332, 96, 1051, 339, 396, 183, 402, 163, 834, 243, 940, 55, 10, 819, 1787, 420, 639, 493, 502, 40, 1140, 7, 148, 267, 429, 628, 75, 999, 1286, 717, 117, 21, 54, 674, 46, 224, 301, 634, 288, 423, 201, 491, 604, 61, 470, 16, 145, 409, 11, 313, 152, 931, 150, 468, 1036, 129, 162, 665, 143, 416, 592, 28, 646, 47, 208, 498, 499, 215, 53, 307, 15, ...
	262, 131, 527, 533, 433, 25, 81, 2148, 175, 82, 544, 197, 70, 100, 241, 790, 12, 641, 120, 13, 138, 801, 1138, 652, 39, 1767, 336, 395, 231, 381, 419, 1194, 212, 967, 1866, 132, 509, 56, 765, 341, 346, 818, 587, 279, 118, 667, 414, 2, 273, 1513, 464, 997, 1659, 570, 1191, 438, 612, 139, 256, 135, 186, 576, 713, 523, 1185, 579, 918, 483, 512, 244, 556, 822, 49, 91, 195, 317, 216, ...
	246, 357, 1020, 102, 627, 122, 121, 35, 64, 421, 476, 73, 90, 412, 662, 26, 116, 1200, 3608, 333, 2254, 38, 181, 370, 189, 284, 384, 354, 992, 217, 24, 559, 657, 465, 1316, 88, 435, 397, 204, 320, 585, 109, 335, 1943, 403, 668, 812, 760, 326, 497, 865, 79, 190, 492, 631, 1114, 1237, 30, 111, 399, 107, 297, 972, 161, 252, 306, 364, 690, 76, 124, 968, 369, 564, 378, 771, 445, 142, ...
	1294, 636, 157, 1537, 1323, 295, 221, 1271, 146, 203, 127, 622, 661, 1395, 432, 324, 458, 679, 45, 166, 953, 522, 178, 257, 1234, 449, 490, 1022, 1522, 372, 80, 884, 334, 481, 599, 677, 869, 905, 309, 583, 87, 344, 418, 376, 643, 194, 391, 113, 169, 517, 1306, 390, 759, 864, 275, 541, 259, 265, 749, 172, 92, 734, 394, 475, 242, 524, 670, 473, 700, 199, 1050, 209, 2371, 655, 588, 101, 549, ...
	750, 471, 504, 232, 1044, 202, 165, 366, 575, 1263, 1704, 253, 625, 683, 237, 270, 673, 472, 34, 911, 272, 258, 389, 582, 1162, 289, 753, 453, 808, 500, 626, 285, 173, 568, 714, 939, 457, 123, 193, 315, 210, 617, 682, 303, 342, 797, 957, 353, 752, 856, 410, 550, 206, 2123, 57, 368, 722, 536, 33, 377, 50, 233, 361, 815, 899, 19, 283, 318, 600, 136, 388, 415, 164, 885, 404, 41, 482];

keys_sz = 35556;
dimensions = [1 1 keys_sz-1 18];

input_filename = 'mouse.txt';

if ~exist('M','var')
	M = dlmread(input_filename, '\t', dimensions);
	[rows,cols] = size(M);
end

if ~exist('sample_distribs', 'var')
	sample_distribs = containers.Map('KeyType', 'int32', 'ValueType', 'any');
end

for g=1:how_many

	included = group_sizes(g);

	% this is the number of samples
	iterations = 1000;
	mi_dist = zeros(iterations,15);

	for i=1:iterations

		if mod(i,100) == 0
			fprintf('index %d (size %d), iteration %d\n',g,included,i);
		end

		rrows = zeros(included,1);
		for j=1:included
			rtemp = randi(keys_sz-1);
			while ismember(rtemp,rrows)
				rtemp = randi(keys_sz-1);
			end
			rrows(j,1) = rtemp;
		end

		arr_a = zeros(included*3,1);
		arr_b = zeros(included*3,1);
		arr_c = zeros(included*3,1);
		arr_d = zeros(included*3,1);
		arr_e = zeros(included*3,1);
		arr_f = zeros(included*3,1);
		for j=1:included
			arr_a(j,1) = M(rrows(j,1), 1);
			arr_a(j+included,1) = M(rrows(j,1), 2);
			arr_a(j+(included*2),1) = M(rrows(j,1), 3);
			arr_b(j,1) = M(rrows(j,1), 4);
			arr_b(j+included,1) = M(rrows(j,1), 5);
			arr_b(j+(included*2),1) = M(rrows(j,1), 6);
			arr_c(j,1) = M(rrows(j,1), 7);
			arr_c(j+included,1) = M(rrows(j,1), 8);
			arr_c(j+(included*2),1) = M(rrows(j,1), 9);
			arr_d(j,1) = M(rrows(j,1), 10);
			arr_d(j+included,1) = M(rrows(j,1), 11);
			arr_d(j+(included*2),1) = M(rrows(j,1), 12);
			arr_e(j,1) = M(rrows(j,1), 13);
			arr_e(j+included,1) = M(rrows(j,1), 14);
			arr_e(j+(included*2),1) = M(rrows(j,1), 15);
			arr_f(j,1) = M(rrows(j,1), 16);
			arr_f(j+included,1) = M(rrows(j,1), 17);
			arr_f(j+(included*2),1) = M(rrows(j,1), 18);
		end

		% 15 combos here
		% this will always compare our random rows stacked into a 1D vector as columns 1-2-3 in that order
		mi_dist(i,1) = mi(arr_a,arr_b);
		mi_dist(i,2) = mi(arr_a,arr_c);
		mi_dist(i,3) = mi(arr_a,arr_d);
		mi_dist(i,4) = mi(arr_a,arr_e);
		mi_dist(i,5) = mi(arr_a,arr_f);
		mi_dist(i,6) = mi(arr_b,arr_c);
		mi_dist(i,7) = mi(arr_b,arr_d);
		mi_dist(i,8) = mi(arr_b,arr_e);
		mi_dist(i,9) = mi(arr_b,arr_f);
		mi_dist(i,10) = mi(arr_c,arr_d);
		mi_dist(i,11) = mi(arr_c,arr_e);
		mi_dist(i,12) = mi(arr_c,arr_f);
		mi_dist(i,13) = mi(arr_d,arr_e);
		mi_dist(i,14) = mi(arr_d,arr_f);
		mi_dist(i,15) = mi(arr_e,arr_f);

	end

	sample_distribs(included) = mi_dist;

end

% uncomment to save file
% save('distribs_mi_random','sample_distribs');
%
